import React, { useRef, useEffect, useState } from 'react'
import './MobileTextEditor.css'

function MobileTextEditor({ content, onChange, placeholder }) {
  const editorRef = useRef(null)
  const [currentStyle, setCurrentStyle] = useState({
    bold: false,
    italic: false,
    underline: false,
    fontSize: 'normal'
  })
  const [cursorPosition, setCursorPosition] = useState(0)

  // „Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆÂàùÊúüÂåñ
  useEffect(() => {
    if (editorRef.current && content !== undefined) {
      if (editorRef.current.innerHTML !== content) {
        editorRef.current.innerHTML = content || ''
        // „Ç´„Éº„ÇΩ„É´‰ΩçÁΩÆ„ÇíÊúÄÂæå„Å´Ë®≠ÂÆö
        if (content) {
          const range = document.createRange()
          const sel = window.getSelection()
          range.selectNodeContents(editorRef.current)
          range.collapse(false)
          sel.removeAllRanges()
          sel.addRange(range)
        }
      }
    }
  }, [content])

  // „Ç´„Éº„ÇΩ„É´‰ΩçÁΩÆ„ÅÆÂèñÂæó„Å®‰øùÂ≠ò
  const saveCursorPosition = () => {
    const sel = window.getSelection()
    if (sel.rangeCount > 0) {
      const range = sel.getRangeAt(0)
      setCursorPosition(range.startOffset)
    }
  }

  // „Çπ„Çø„Ç§„É´„ÅÆÈÅ©Áî®Ôºà„Ç´„Éº„ÇΩ„É´‰ΩçÁΩÆ„Åã„ÇâÂÖ•Âäõ„Åï„Çå„ÇãÊñáÂ≠ó„Å´ÈÅ©Áî®Ôºâ
  const toggleStyle = (styleType, value = null) => {
    const newStyle = { ...currentStyle }
    
    switch (styleType) {
      case 'bold':
        newStyle.bold = !newStyle.bold
        break
      case 'italic':
        newStyle.italic = !newStyle.italic
        break
      case 'underline':
        newStyle.underline = !newStyle.underline
        break
      case 'fontSize':
        newStyle.fontSize = value
        break
    }
    
    setCurrentStyle(newStyle)
    
    // „Éï„Ç©„Éº„Ç´„Çπ„ÇíÊàª„Åô
    if (editorRef.current) {
      editorRef.current.focus()
    }
  }

  // „ÉÜ„Ç≠„Çπ„ÉàÂÖ•ÂäõÊôÇ„ÅÆÂá¶ÁêÜ
  const handleInput = (e) => {
    if (editorRef.current) {
      // ÂÖ•Âäõ„Åï„Çå„ÅüÊñáÂ≠ó„Å´ÁèæÂú®„ÅÆ„Çπ„Çø„Ç§„É´„ÇíÈÅ©Áî®
      const selection = window.getSelection()
      if (selection.rangeCount > 0) {
        const range = selection.getRangeAt(0)
        
        // ÊúÄÂæå„Å´ÂÖ•Âäõ„Åï„Çå„ÅüÊñáÂ≠ó„ÇíÂèñÂæó
        if (e.inputType === 'insertText' || e.inputType === 'insertCompositionText') {
          // „Çπ„Çø„Ç§„É´„ÇíÈÅ©Áî®„Åô„ÇãÂá¶ÁêÜ
          applyCurrentStyle()
        }
      }
      
      onChange(editorRef.current.innerHTML)
      saveCursorPosition()
    }
  }

  // ÁèæÂú®„ÅÆ„Çπ„Çø„Ç§„É´„ÇíÈÅ©Áî®
  const applyCurrentStyle = () => {
    const selection = window.getSelection()
    if (selection.rangeCount === 0) return

    // „Çπ„Çø„Ç§„É´„Ç≥„Éû„É≥„Éâ„ÇíÈÅ©Áî®
    if (currentStyle.bold) {
      document.execCommand('bold', false, null)
    }
    if (currentStyle.italic) {
      document.execCommand('italic', false, null)
    }
    if (currentStyle.underline) {
      document.execCommand('underline', false, null)
    }
    
    // „Éï„Ç©„É≥„Éà„Çµ„Ç§„Ç∫„ÅÆÈÅ©Áî®
    if (currentStyle.fontSize !== 'normal') {
      const sizeMap = {
        'large': '7',
        'medium': '5',
        'small': '3'
      }
      document.execCommand('fontSize', false, sizeMap[currentStyle.fontSize])
    }
  }

  // „É™„Çπ„ÉàËøΩÂä†
  const insertList = (type) => {
    document.execCommand(type === 'bullet' ? 'insertUnorderedList' : 'insertOrderedList')
    if (editorRef.current) {
      onChange(editorRef.current.innerHTML)
      editorRef.current.focus()
    }
  }

  // ÁîªÂÉèËøΩÂä†
  const insertImage = () => {
    const input = document.createElement('input')
    input.type = 'file'
    input.accept = 'image/*'
    input.onchange = (e) => {
      const file = e.target.files[0]
      if (file) {
        const reader = new FileReader()
        reader.onload = (e) => {
          const img = `<img src="${e.target.result}" style="max-width: 100%; height: auto; display: block; margin: 10px 0;" />`
          document.execCommand('insertHTML', false, img)
          if (editorRef.current) {
            onChange(editorRef.current.innerHTML)
          }
        }
        reader.readAsDataURL(file)
      }
    }
    input.click()
  }

  // „Éö„Éº„Çπ„ÉàÂá¶ÁêÜ
  const handlePaste = (e) => {
    e.preventDefault()
    const text = e.clipboardData.getData('text/plain')
    document.execCommand('insertText', false, text)
    if (editorRef.current) {
      onChange(editorRef.current.innerHTML)
    }
  }

  return (
    <div className="mobile-text-editor">
      {/* „É¢„Éê„Ç§„É´Áî®„ÉÑ„Éº„É´„Éê„ÉºÔºà„Ç≠„Éº„Éú„Éº„Éâ„ÅÆ‰∏ä„Å´Ë°®Á§∫Ôºâ */}
      <div className="mobile-toolbar">
        <div className="toolbar-scroll">
          <button
            className={`toolbar-btn ${currentStyle.fontSize === 'large' ? 'active' : ''}`}
            onClick={() => toggleStyle('fontSize', 'large')}
            type="button"
          >
            <span className="text-large">A</span>
          </button>
          <button
            className={`toolbar-btn ${currentStyle.fontSize === 'medium' ? 'active' : ''}`}
            onClick={() => toggleStyle('fontSize', 'medium')}
            type="button"
          >
            <span className="text-medium">A</span>
          </button>
          <button
            className={`toolbar-btn ${currentStyle.fontSize === 'normal' ? 'active' : ''}`}
            onClick={() => toggleStyle('fontSize', 'normal')}
            type="button"
          >
            <span className="text-normal">A</span>
          </button>
          
          <div className="toolbar-divider" />
          
          <button
            className={`toolbar-btn ${currentStyle.bold ? 'active' : ''}`}
            onClick={() => toggleStyle('bold')}
            type="button"
          >
            <strong>B</strong>
          </button>
          <button
            className={`toolbar-btn ${currentStyle.italic ? 'active' : ''}`}
            onClick={() => toggleStyle('italic')}
            type="button"
          >
            <em>I</em>
          </button>
          <button
            className={`toolbar-btn ${currentStyle.underline ? 'active' : ''}`}
            onClick={() => toggleStyle('underline')}
            type="button"
          >
            <u>U</u>
          </button>
          
          <div className="toolbar-divider" />
          
          <button
            className="toolbar-btn"
            onClick={() => insertList('bullet')}
            type="button"
          >
            ‚Ä¢
          </button>
          <button
            className="toolbar-btn"
            onClick={() => insertList('number')}
            type="button"
          >
            1.
          </button>
          
          <div className="toolbar-divider" />
          
          <button
            className="toolbar-btn"
            onClick={insertImage}
            type="button"
          >
            üì∑
          </button>
        </div>
      </div>

      {/* „Ç®„Éá„Ç£„ÇøÊú¨‰Ωì */}
      <div
        ref={editorRef}
        contentEditable
        className="mobile-editor-content"
        onInput={handleInput}
        onFocus={saveCursorPosition}
        onClick={saveCursorPosition}
        onKeyUp={saveCursorPosition}
        onPaste={handlePaste}
        placeholder={placeholder}
        suppressContentEditableWarning={true}
        autoCorrect="off"
        autoCapitalize="off"
        spellCheck="false"
      />
    </div>
  )
}

export default MobileTextEditor